openapi: 3.0.0
info:
  version: 2.0.0
  title: GanTrade api
  description: |
    # Overview
      API for GanTrade
tags:
  - name: bot
    description: API bot

  - name: trade
    description: API trade

  - name: user
    description: API user

paths:
  /bot/status:
    get:
      tags:
        - bot
      operationId: botStatus
      summary: Get Statut Bot Telegram
      responses:
        '204':
          description: bot up
        '503':
          description: bot down
  /bot/start:
    post:
      tags:
        - bot
      operationId: startBot
      summary: Start Strategy ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotStrategy'
      responses:
        '204':
          description: bot started
        '503':
          description: bot not started
  /bot/stop:
    post:
      tags:
        - bot
      operationId: stopBot
      summary: Stop Strategy ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotStrategy'
      responses:
        '204':
          description: bot stopped
        '503':
          description: bot not stopped
  /bot/strategies:
    get:
      tags:
        - bot
      operationId: strategyList
      summary: Get All Strategy By User
      parameters:
        - in: query
          name: userId
          description: userId
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          description: the number of elements required per page
          required: false
          schema:
            type: integer
        - in: query
          name: pageIndex
          description: the index page requested
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: bot stategy list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyListTO'
        '503':
          description: bot stategy not foynd
    post:
      tags:
        - bot
      operationId: createStrategy
      summary: Create New Strategy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotStrategyCreateRequest'
      responses:
        '200':
          description: bot stategy created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotStrategyCreateResponse'
        '503':
          description: bot stategy not created
  /bot/strategies/{id}:
    get:
      tags:
        - bot
      operationId: getStrategyById
      summary: Get Strategy By ID
      parameters:
        - in: path
          name: id
          description: strategy id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: bot stategy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyTO'
    put:
      tags:
        - bot
      operationId: updateStrategyById
      summary: Update Strategy By ID
      parameters:
        - in: path
          name: id
          description: strategy id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StrategyTO'
      responses:
        '200':
          description: bot stategy saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyTO'
        '503':
          description: bot stategy not saved
    delete:
      tags:
        - bot
      operationId: deleteStrategyById
      summary: Delete Strategy By ID
      parameters:
        - in: path
          name: id
          description: strategy id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: bot stategy
  /bot/strategies/{id}/status:
    get:
      tags:
        - bot
      operationId: botStrategyStatus
      summary: Get strategy status
      parameters:
        - in: path
          name: id
          description: strategy id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: strategy up
        '503':
          description: strategy down
  /bot/strategies/{id}/status/info:
    get:
      tags:
        - bot
      operationId: getStrategyStatusInfo
      summary: Get Strategy Status Info
      parameters:
        - in: path
          name: id
          description: strategy id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: bot stategy status info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StrategyStatusInfoTO'
  /bot/strategies/simulation:
    post:
      tags:
        - bot
      operationId: strategySimulation
      summary: Simulation Strategy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StrategySimulationRequest'
      responses:
        '200':
          description: bot stategy simulation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategySimulationResponse'

  /trades:
    get:
      tags:
        - trade
      operationId: tradeList
      summary: Get All Trade By User
      parameters:
        - in: query
          name: userId
          description: userId
          required: true
          schema:
            type: integer
        - in: query
          name: tradeState
          required: false
          schema:
            type: string
        - in: query
          name: tradeDirection
          required: false
          schema:
            type: string
        - in: query
          name: symbol
          required: false
          schema:
            type: string
        - in: query
          name: pageSize
          description: the number of elements required per page
          required: false
          schema:
            type: integer
        - in: query
          name: pageIndex
          description: the index page requested
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeListTO'
        '400':
          description: bad input parameter
  /trades/{id}:
    get:
      tags:
        - trade
      operationId: getTradeById
      summary: Get Trade By ID
      parameters:
        - in: path
          name: id
          description: trade id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: bot trade
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeTO'
    put:
      tags:
        - trade
      operationId: updateTradeById
      summary: Update Trade By ID
      parameters:
        - in: path
          name: id
          description: trade id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradeTO'
      responses:
        '200':
          description: bot trade saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeTO'
        '503':
          description: bot trade not saved
    delete:
      tags:
        - trade
      operationId: deleteTradeById
      summary: Delete Trade By ID
      parameters:
        - in: path
          name: id
          description: trade id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: bot trade

  /user:
    get:
      tags:
        - user
      operationId: user list
      summary: Get All Users
      parameters:
        - in: query
          name: pageSize
          description: the number of elements required per page
          required: false
          schema:
            type: integer
        - in: query
          name: pageIndex
          description: the index page requested
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: user list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListTO'
        '503':
          description: bot stategy not created
    post:
      tags:
        - user
      operationId: createUser
      summary: Create New User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '503':
          description: user not created
  /user/{id}:
    get:
      tags:
        - user
      operationId: getUserById
      summary: Get User By ID
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTO'
    put:
      tags:
        - user
      operationId: updateUserById
      summary: Update User By ID
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: bot stategy saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTO'
        '503':
          description: bot stategy not saved
    delete:
      tags:
        - user
      operationId: deleteUserById
      summary: Delete User By ID
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: user deleted

  /user/email/{emailAddress}:
    get:
      tags:
        - user
      operationId: getUserByEmail
      summary: Get User By Email
      parameters:
        - in: path
          name: emailAddress
          description: user email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTO'

  /exchange/{userId}:
    post:
      tags:
        - exchange
      operationId: addExchange
      summary: Add Exchange toUser
      parameters:
        - in: path
          name: userId
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeConfiguration'
      responses:
        '204':
          description: exchange created
        '503':
          description: exchange not created
  /exchange/{userId}/{exchange}:
    delete:
      tags:
        - exchange
      operationId: deleteExchangeByUserId
      summary: Delete Exchange By User ID
      parameters:
        - in: path
          name: userId
          description: user id
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: exchange
          description: exchange
          required: true
          schema:
            type: string
      responses:
        '204':
          description: user deleted
components:
  schemas:
    OrderTO:
      type: object
      properties:
        symbolInfo:
          $ref: '#/components/schemas/SymbolInfoTO'
        type:
          type: string
        side:
          type: string
        price:
          type: number
        amount:
          type: number
        insertionTime:
          type: string
          format: date-time
    Bar:
      type: object
      properties:
        id:
          type: string
        openPrice:
          type: number
        minPrice:
          type: number
        maxPrice:
          type: number
        closePrice:
          type: number
        volume:
          type: number
        trades:
          type: number
        amount:
          type: number
        timePeriod:
          type: number
        beginTime:
          type: string
        endTime:
          type: string
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          description: the total number of elements obtained from the request
        pageSize:
          type: integer
          description: the number of elements required per page
        nextPageIndex:
          type: string
          description: the index relating to the next page to be proposed
        isLastPage:
          type: boolean
          description: Indicator related to the presentation of the values of the
    BotStrategy:
      type: object
      required:
        - strategySeqId
      properties:
        strategySeqId:
          type: integer
          format: int64
        strategyName:
          type: string
        debug:
          type: boolean
          default: false
    StrategySimulation:
      type: object
      properties:
        strategyId:
          type: integer
          format: int64
        entryDate:
          type: string
          format: date-time
        entryAmount:
          type: number
          format: double
        entryPrice:
          type: number
          format: double
        exitDate:
          type: string
          format: date-time
        exitPrice:
          type: number
          format: double
        gain:
          type: number
          format: double

    #REQUEST AND RESPONSE
    BotStrategyCreateRequest:
      type: object
      required:
        - strategy
      properties:
        strategy:
          $ref: '#/components/schemas/StrategyTO'
    BotStrategyCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64

    StrategySimulationRequest:
      type: object
      required:
        - strategyId
        - startDate
        - endDate
      properties:
        strategyId:
          type: array
          items:
            type: integer
            format: int64
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        amount:
          type: number
          format: double
        amountType:
          type: string
          enum:
            - COIN
            - WALLET
        fee:
          type: number
          format: double
        feeType:
          type: string
          enum:
            - PERCENTAGE
            - WALLET
        userId:
          type: integer
          format: int64
        exchange:
          $ref: '#/components/schemas/Exchange'
    StrategySimulationResponse:
      type: object
      properties:
        strategySimulations:
          type: array
          items:
            $ref: '#/components/schemas/StrategySimulation'
        gain:
          type: number
          format: double
        lost:
          type: number
          format: double
        fee:
          type: number
          format: double

    UserCreateRequest:
      type: object
      required:
        - name
        - surname
        - email
        - password
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
        telegramId:
          type: string
        exchangeConfiguration:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/ExchangeConfiguration'

    UserCreateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64

    #TODO verificare se tutti i TO servono
    #LIST TO
    TradeListTO:
      type: object
      properties:
        trades:
          type: array
          items:
            $ref: '#/components/schemas/TradeTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    TradeTO:
      type: object
      properties:
        seqId:
          type: integer
          format: int64
        strategyId:
          type: integer
          format: int64
        tradeState:
          $ref: '#/components/schemas/TradeState'
        tradeDirection:
          type: string
        symbol:
          type: string
        amount:
          type: number
        expectedPriceOpen:
          type: number
        expectedPriceClose:
          type: number
        percentage:
          type: number
        userId:
          type: integer
          format: int64
        exchange:
          $ref: '#/components/schemas/Exchange'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderTO'
    StrategyListTO:
      type: object
      properties:
        strategies:
          type: array
          items:
            $ref: '#/components/schemas/StrategyTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    StrategyTO:
      type: object
      properties:
        seqId:
          type: integer
          format: int64
        name:
          type: string
        symbolInfo:
          type: array
          items:
            $ref: '#/components/schemas/SymbolInfoTO'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RuleTO'
        timeframe:
          $ref: '#/components/schemas/TimeFrame'
        checkRulesEveryTime:
          type: boolean
          default: true
        checkRulesEveryTimeValue:
          type: integer
          description: time value in minute
          default: 0
        status:
          $ref: '#/components/schemas/StrategyStatus'
        userId:
          type: integer
          format: int64
        exchange:
          $ref: '#/components/schemas/Exchange'
    SymbolInfoTO:
      type: object
      properties:
        symbol:
          type: string
        baseAsset:
          type: string
        quoteAsset:
          type: string
        orderSize:
          type: number
        baseAssetPrecision:
          type: integer
          format: int64
        quoteAssetPrecision:
          type: integer
          format: int64
        stepSize:
          type: number
          format: double
        minQty:
          type: number
          format: double
        tickSizePrice:
          type: number
          format: double
    RuleTO:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/RuleTypeEnum'
        condition:
          $ref: '#/components/schemas/ConditionTO'
        action:
          $ref: '#/components/schemas/ActionTO'
        operator:
          $ref: '#/components/schemas/OperatorEnum'
    ConditionTO:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ConditionTypeEnum'
        threshold:
          type: number
        indicators:
          type: array
          items:
            $ref: '#/components/schemas/IndicatorTO'
        operator:
          $ref: '#/components/schemas/OperatorEnum'
    IndicatorTO:
      type: object
      properties:
        period:
          type: integer
          format: int64
        deviation:
          type: integer
          format: int64
        minThreshold:
          type: number
        middleThreshold:
          type: number
        maxThreshold:
          type: number
        type:
          $ref: '#/components/schemas/IndicatorTypeEnum'
        indicatorTypeRef:
          $ref: '#/components/schemas/IndicatorTypeEnum'
    ActionTO:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ActionTypeEnum'
        amount:
          type: number
    UserListTO:
      type: object
      properties:
        strategies:
          type: array
          items:
            $ref: '#/components/schemas/UserTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    UserTO:
      type: object
      properties:
        seqId:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        telegramId:
          type: string
        exchange:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeTO'

    ExchangeTO:
      type: object
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        label:
          type: string
        creation:
          type: string
          format: date-time

    ExchangeConfiguration:
      type: object
      properties:
        apiKey:
          type: string
        secretKey:
          type: string
        exchangeTO:
          $ref: '#/components/schemas/ExchangeTO'

    #ENUM
    RuleTypeEnum:
      type: string
      enum:
        - CONDITION
        - ACTION
        - OPERATOR
    ConditionTypeEnum:
      type: string
      enum:
        - IS_EQUAL
        - LOWER_THAN
        - GREATER_THAN
        - CROSSING_ABOVE
        - CROSSING_BELOW
        - STOP_GAIN
        - STOP_LOSS
        - STOP_LOSS_FROM_HIGHEST_PRICE
        - STOCHASTIC_RSI_BOLLINGER_BAND_EXIT_RULE
    IndicatorTypeEnum:
      type: string
      enum:
        - RSI
        - EMA
        - SMA
        - ADX
        - BOLLINGER_BAND_MIDDLE
        - BOLLINGER_BAND_LOWER
        - BOLLINGER_BAND_UPPER
        - BOLLINGER_BAND_WIDTH
        - LOW_PRICE
        - HIGH_PRICE
        - CLOSE_PRICE
        - DIFFERENCE_PERCENTAGE
        - STOCHASTIC_RSI
        - STOCHASTIC_OSCILLATOR_D
        - STOCHASTIC_OSCILLATOR_K
    ActionTypeEnum:
      type: string
      enum:
        - BUY
        - SELL
    OperatorEnum:
      type: string
      enum:
        - AND
        - OR
    TimeFrame:
      type: string
      enum:
        - 1m
        - 3m
        - 5m
        - 15m
        - 30m
        - 1h
        - 2h
        - 4h
        - 6h
        - 8h
        - 12h
        - 1d
        - 3d
        - 1w
    StrategyStatus:
      type: string
      default: DISABLE
      enum:
        - ACTIVE
        - DISABLE
    TradeState:
      type: string
      enum:
        - ACTIVE
        - CREATED
        - OPENING
        - OPEN
        - CLOSING
        - CLOSED
        - ERROR
    Exchange:
      type: string
      enum:
        - BINANCE
        - COINBASE
        - BYBIT
    StrategyStatusInfoTO:
      type: object
      properties:
        price:
          type: number
          format: double
        rsi:
          type: array
          items:
            $ref: '#/components/schemas/RSITO'
        volume:
          type: number
          format: double
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderTO'
    RSITO:
      type: object
      properties:
        period:
          type: integer
          format: int32
        value:
          type: number
          format: double